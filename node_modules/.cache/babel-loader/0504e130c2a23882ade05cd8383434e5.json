{"ast":null,"code":"import _regeneratorRuntime from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deepali/felicityDAPP/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/deepali/felicityDAPP/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport medicalFile from '../abis/medicalFile.json';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, contract, medicalFileHash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = medicalFile.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                contract = web3.eth.Contract(medicalFile.abi, networkData.address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 14;\n                return contract.methods.get().call();\n\n              case 14:\n                medicalFileHash = _context3.sent;\n                this.setState({\n                  medicalFileHash: medicalFileHash\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"Submitting file to ipfs...\");\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('Ipfs result', result); // this.setState({ medicalFileHash: result[0].hash })\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        _this.state.contract.methods.set(result[0].hash).send({\n          from: _this.state.account\n        }).then(function (r) {\n          return _this.setState({\n            medicalFileHash: result[0].hash\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      medicalFileHash: 'QmVPykCWTMWFBqEmRgSYfe9qK2jCjR3o59LKKYMmAw6Xps',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Medical Report\")), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.medicalFileHash),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Upload\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/deepali/felicityDAPP/src/components/App.js"],"names":["React","Component","Web3","medicalFile","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","contract","Contract","abi","address","methods","get","call","medicalFileHash","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","state","onSubmit","add","error","set","hash","send","from","then","r"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport medicalFile from '../abis/medicalFile.json'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId() \n    const networkData = medicalFile.networks[networkId]\n    if(networkData) {\n      const contract = web3.eth.Contract(medicalFile.abi, networkData.address)\n      this.setState({ contract })\n      const medicalFileHash = await contract.methods.get().call()\n      this.setState({ medicalFileHash })\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      medicalFileHash: 'QmVPykCWTMWFBqEmRgSYfe9qK2jCjR3o59LKKYMmAw6Xps',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      // this.setState({ medicalFileHash: result[0].hash })\n      if(error) {\n        console.error(error)\n        return\n      }\n       this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n         return this.setState({ medicalFileHash: result[0].hash })\n       })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <div\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\">\n            Medical Report\n            </div>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                  <img src={`https://ipfs.infura.io/ipfs/${this.state.medicalFileHash}`} />\n                <p>&nbsp;</p>\n                <h2>Upload</h2>\n                <form onSubmit={this.onSubmit} >\n                  <input type='file' onChange={this.captureFile} />\n                  <input type='submit' />\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}